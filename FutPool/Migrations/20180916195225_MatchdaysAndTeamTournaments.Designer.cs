// <auto-generated />
using System;
using FutPool.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FutPool.Migrations
{
    [DbContext(typeof(FutPoolContext))]
    [Migration("20180916195225_MatchdaysAndTeamTournaments")]
    partial class MatchdaysAndTeamTournaments
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("FutPool.Models.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("FutPool.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AwayTeamId");

                    b.Property<DateTime>("DateTime");

                    b.Property<int?>("HomeTeamId");

                    b.Property<int?>("MatchdayId");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("MatchdayId");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("FutPool.Models.Matchday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("TournamentId");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Matchday");
                });

            modelBuilder.Entity("FutPool.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("FutPool.Models.TeamTournament", b =>
                {
                    b.Property<int>("TeamId");

                    b.Property<int>("TournamentId");

                    b.HasKey("TeamId", "TournamentId");

                    b.HasIndex("TournamentId");

                    b.ToTable("TeamTournament");
                });

            modelBuilder.Entity("FutPool.Models.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LeagueId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("FutPool.Models.Match", b =>
                {
                    b.HasOne("FutPool.Models.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId");

                    b.HasOne("FutPool.Models.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId");

                    b.HasOne("FutPool.Models.Matchday")
                        .WithMany("Matches")
                        .HasForeignKey("MatchdayId");
                });

            modelBuilder.Entity("FutPool.Models.Matchday", b =>
                {
                    b.HasOne("FutPool.Models.Tournament")
                        .WithMany("Matchdays")
                        .HasForeignKey("TournamentId");
                });

            modelBuilder.Entity("FutPool.Models.TeamTournament", b =>
                {
                    b.HasOne("FutPool.Models.Team", "Team")
                        .WithMany("TeamTournaments")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FutPool.Models.Tournament", "Tournament")
                        .WithMany("TeamTournaments")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FutPool.Models.Tournament", b =>
                {
                    b.HasOne("FutPool.Models.League", "League")
                        .WithMany("Tournaments")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
